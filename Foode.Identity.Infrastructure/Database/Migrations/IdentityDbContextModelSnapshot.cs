// <auto-generated />
using System;
using Foode.Identity.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foode.Identity.Infrastructure.Database.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Foodie.Common.Infrastructure.Database.Audits.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Foodie.Common.Infrastructure.Database.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OccurrenceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Admins.Admin", b =>
                {
                    b.HasBaseType("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Customers.Customer", b =>
                {
                    b.HasBaseType("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Foodie.Identity.Domain.OrderHandlers.OrderHandler", b =>
                {
                    b.HasBaseType("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.ToTable("OrderHandlers", (string)null);
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser", b =>
                {
                    b.OwnsOne("Foodie.Identity.Domain.Common.ApplicationUser.ValueObjects.RefreshToken", "RefreshToken", b1 =>
                        {
                            b1.Property<int>("ApplicationUserId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset?>("ExpirationTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("ApplicationUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Admins.Admin", b =>
                {
                    b.HasOne("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Foodie.Identity.Domain.Admins.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Customers.Customer", b =>
                {
                    b.HasOne("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Foodie.Identity.Domain.Customers.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foodie.Identity.Domain.OrderHandlers.OrderHandler", b =>
                {
                    b.HasOne("Foodie.Identity.Domain.Common.ApplicationUser.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Foodie.Identity.Domain.OrderHandlers.OrderHandler", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
