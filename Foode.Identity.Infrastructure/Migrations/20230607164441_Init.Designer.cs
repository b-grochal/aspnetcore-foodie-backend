// <auto-generated />
using System;
using Foode.Identity.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Foode.Identity.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20230607164441_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Foodie.Identity.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("Foodie.Identity.Domain.Entities.ApplicationUser");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CreatedBy = "Seed",
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 6, 7, 18, 44, 40, 374, DateTimeKind.Unspecified).AddTicks(7399), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "michsco123@foodie.com",
                            FirstName = "Michael",
                            IsLocked = false,
                            LastName = "Scott",
                            PasswordHash = "$2a$11$cEzx63FL1Pub5FcY5jFAEONMr9uX2krZly94m0boRqBP5cdIaI24y",
                            PhoneNumber = "123-456-789",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Entities.Customer", b =>
                {
                    b.HasBaseType("Foodie.Identity.Domain.Entities.ApplicationUser");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            CreatedBy = "Seed",
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 6, 7, 18, 44, 40, 713, DateTimeKind.Unspecified).AddTicks(4904), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "jimhal123@foodie.com",
                            FirstName = "Jim",
                            IsLocked = false,
                            LastName = "Halpert",
                            PasswordHash = "$2a$11$wM.7AfiX9cxLcwL0xfIAWe0ZQNmnnIP5av04qEm1r4Mzg0lrh7KHe",
                            PhoneNumber = "123-456-789",
                            Role = 3
                        });
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Entities.OrderHandler", b =>
                {
                    b.HasBaseType("Foodie.Identity.Domain.Entities.ApplicationUser");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.ToTable("OrderHandlers");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            CreatedBy = "Seed",
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 6, 7, 18, 44, 40, 555, DateTimeKind.Unspecified).AddTicks(161), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "dwigsch123@foodie.com",
                            FirstName = "Dwight",
                            IsLocked = false,
                            LastName = "Schrute",
                            PasswordHash = "$2a$11$0F8kldF/MiAFyl2XAgd83OmFiTIpn3bAgcE9H5Ait4XtN7VY.zd72",
                            PhoneNumber = "123-456-789",
                            Role = 2,
                            LocationId = 1
                        });
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Entities.Admin", b =>
                {
                    b.HasOne("Foodie.Identity.Domain.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Foodie.Identity.Domain.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Foodie.Identity.Domain.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Foodie.Identity.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foodie.Identity.Domain.Entities.OrderHandler", b =>
                {
                    b.HasOne("Foodie.Identity.Domain.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Foodie.Identity.Domain.Entities.OrderHandler", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
